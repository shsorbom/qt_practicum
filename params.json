{"name":"Qt practicum","tagline":"Qt independent studies course","body":"### QT Practicum Final Write-up\r\n \r\n## Introduction\r\nThe QT practicum repository that I have been hosting here for the last few months has been a record of my journey attempting to learn a few things about QT as part of an independent study program for my computer science minor at Loyola Marymount University. Though a couple of GUI interface classes were already being taught at LMU, I was interested specifically in QT for a few reasons. First, it has direct relevance to software that I use every day. The KDE desktop which I use is extensively based on QT. From a technical standpoint, QT also has the interesting property that it looks a lot like the Java swing libraries, but is coded in C++ so that all executables written with it can be compiled natively. Being an API written on C++, QT also gives the user interesting possibilities for extremely low-level control, thus making programs written in it even more efficient. Despite my initially slow start, I believe I have learned a fair amount about the QT APIs and a lot about the very important subject of porting software.\r\n\r\n## What I Did\r\n \r\nMy exploration of the QT world was facilitated through porting a project known as kcm-ufw. kcm-ufw is a firewall graphical user interface for the KDE desktop, which runs primarily on Linux systems. Though I did not originally create the project, it became my responsibility to \"breathe new life into it\". Though I had begun work on this project before, the lion's share of all of the work I have done has been accomplished over the four-month semesterperiod. My task became one of changing all of the library calls from the underlying KDE four API (based on QT) to the new K frameworks five API now supported by the KDE developers. Though my initial plan had been to add features to the new port, all of my time this semester was taken up making sure the newly ported code compiled against the new KDE libraries. Though the port does not work properly yet, I was eventually able to reach a point where the software compiled properly without much incident.\r\n\r\n## What I learned\r\nThough I had initially hoped for more than simply being able to compile the project, I believe I came away having learned some general things about programming and API usage. This project was my first experience working with somebody else's code, and as such I did not always know what I was doing. I did however notice a common theme to many of the problems preventing my code from compiling. Many times, the call signatures on the new QT APIs had shifted significantly. A pattern began to emerge of looking up the old code in the KDE four documentation, looking up the comparing that to the examples in the KDE five porting wiki, looking up the KDE five API, and then altering the call signature of the offending function accordingly. Though the process sounds easy on paper, there were many permutations of this problem. Very often, the calls I needed were housed in entirely separate libraries than the KDE four counterparts. In many cases, I had to simply comment out code that didn't work and move on. But there were many smaller lessons as well which I think will serve me very well regardless of the capacity in which I continue programming.\r\n\r\nMy first major lesson is aptly summed up in four letters: RTFM! I was not overly concerned with the logic of the code. I knew that in previous incarnations, it had worked. As a result, when errors cropped up, I started by focusing on the immediate syntax error as reported by the C compiler. Unfortunately, if I had read the surrounding code and actually tried to understand what the module was doing, I suspect I could have gotten the project done much faster. In one case, the fix was as simple as recognizing that a certain set of files was auto generated (as stated in the header). Hence the RTFM. Secondly, I realized the importance of being able to break down programming problems into small steps. This is the preferred method to hot in most computer science classes, but it didn't really sink in that I should work in little bits at a time on my own projects until I started comprehending the scale of this one. I suspect I might have been able to get a running port much sooner if I had been more aggressive about removing everything but the core functionality of the firewall module. Initially, I was hesitant to do this for a number of reasons. I was worried that if I postponed porting too many things, I would end up simply forgetting to do the work. It also took me a fairly long time to familiarize myself with the various pieces of the code and how they interacted. As a result, I was hesitant to strip anything out on the basis that nearly everything would be important until proven otherwise. If I did this project over again, I would spend the first week familiarizing myself with the code, identifying the core bits, and trimming out all of the remaining bells and whistles. Despite this being a programming project, I believe I also learned an important lesson about life and independent work in general as well. A lot of the time, as I got deeper into the code, the error messages seemed to mount into a tangled cascade. I suspect that part of my slow progress was time consumed worrying about whether or not I would actually finish on time. Unfortunately, this leads me to the conclusion that sometimes I just need to get over myself and do the work.\r\n\r\nFinally, I learned the value of having decent reference implementations when working on code one has never seen before. I created reference implementations twice in this project â€“ one called Q account( which was a partial port of a previous java at assignment) and the reference implementation of Q button box group. Having reference implementations I could understand easily on hand was extremely valuable for getting me up to speed quickly in a framework which I had never seen before. If I was to start this project over again, I would be sure to spend either my first or second week with a few basic lessons in QT first. I had of course looked at these over the summer, but it was strange realizing how much I had forgot in that time period. Though the clean room builds were useful, I'm not entirely sure how many I could have done and still had time to do the porting work that I needed to finish. Unfortunately, even those two implementations took me a fairly long time to complete.\r\n\r\n## What Is Next\r\n\r\nThough my independent studies course is over, my work on this project is not. I cannot predict how long it will take me to finish my ultimate goal of having a firewall GUI that actually works as advertised, but I hope to have a beta ready by January, in time for the Debian Linux distributions \"feature freeze\" in which they stop accepting new package additions into the repository for the newest Debian release. After the port is working, I would like to restore some of the missing functionality I had to cut out four times sake. This functionality included a log viewer for the firewall traffic, image icons for several of the buttons, the help documentation, and the ability to save and load profiles of predefined firewall rules. In addition, I would eventually like to add the following features: a checkbox in the GUI interface to allow traffic to be NATed (useful for subnet gateways), the ability to define custom port templates from the GUI for new protocols, and the ability to notify the user of certain traffic via the notification bar if desired. Though I would have liked to plan for more actual coding, I believe that even having looked at the API enough, I could implement some of these features with enough patience given what I have learned in this class.\r\n\r\n## Conclusion\r\n\r\nThough I didn't get as far as I wanted to in the end, I'm proud of my achievement of actually getting a working build. I also believe that given everything I have outlined, this class leaves me better prepared for future challenges, especially where the QT API is concerned.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}